import re
import numpy as np

def parse_rotamer_data_idx(file_path, var_name):
    with open(file_path, 'r') as f:
        content = f.read()

    # Regex to find the specified array variable
    var_regex = re.compile(r"int\s+" + re.escape(var_name) + r"\[\]\[6\]\s*=\s*\{(.*?)\};", re.DOTALL)
    match = var_regex.search(content)

    if not match:
        print(f"Variable '{var_name}' not found.")
        return None

    data_str = match.group(1)

    # Regex to parse each inner array
    row_regex = re.compile(r"\{\s*(-?\d+),\s*(-?\d+),\s*(-?\d+),\s*(-?\d+),\s*(-?\d+),\s*(-?\d+)\s*\}")

    parsed_data = []
    for row_match in row_regex.finditer(data_str):
        row = [int(x) for x in row_match.groups()]
        parsed_data.append(row)

    return parsed_data

def parse_rotamer_data_coords(file_path, var_name):
    with open(file_path, 'r') as f:
        content = f.read()

    # Regex to find the specified array variable
    var_regex = re.compile(r"real\s+" + re.escape(var_name) + r"\[\]\[3\]\s*=\s*\{(.*?)\};", re.DOTALL)
    match = var_regex.search(content)

    if not match:
        print(f"Variable '{var_name}' not found.")
        return None

    data_str = match.group(1)

    # Regex to parse each inner array
    row_regex = re.compile(r"\{\s*(-?[\d\.]+f?),\s*(-?[\d\.]+f?),\s*(-?[\d\.]+f?)\s*\}")

    parsed_data = []
    for row_match in row_regex.finditer(data_str):
        row = [float(x.replace('f', '')) for x in row_match.groups()]
        parsed_data.append(row)

    return parsed_data

def main():
    idx_file_path = 'c_legacy/src/rot_data_idx.h'
    coords_file_path = 'c_legacy/src/rot_data_coords.h'

    rot_stat_idx = parse_rotamer_data_idx(idx_file_path, 'rot_stat_idx')
    rot_stat_coords = parse_rotamer_data_coords(coords_file_path, 'rot_stat_coords')

    with open('pulchra/rotamer_data.py', 'w') as f:
        f.write("# This file is generated by parse_rotamer_data.py. DO NOT EDIT.\n")
        f.write("from numpy import array, int32, float64\n\n")

        f.write("ROT_STAT_IDX = array(\n")
        f.write(repr(rot_stat_idx))
        f.write(", dtype=int32)\n\n")

        f.write("ROT_STAT_COORDS = array(\n")
        f.write(repr(rot_stat_coords))
        f.write(", dtype=float64)\n")


if __name__ == "__main__":
    main()
