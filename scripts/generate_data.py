import json
from pathlib import Path
import numpy as np
from pulchra.hydrogens import get_hydrogen_positions

def format_array(arr):
    # Custom formatter to avoid extra spaces and ensure correct dtype output
    if arr.dtype == np.int32:
        return "array([" + ", ".join(map(str, arr)) + "], dtype=int32)"
    else:
        # Format float arrays with controlled precision
        return "array([" + ", ".join([f"{x:.3f}" for x in arr.flatten()]) + "])"

def main():
    # Get the project root directory
    root_dir = Path(__file__).parent.parent
    parameters_dir = root_dir / 'pulchra' / 'parameters'
    data_file = root_dir / 'pulchra' / 'data.py'

    # The canonical order of amino acids
    canonical_order = "GASCVTIPMDNLKEQRHFYW"

    # --- Part 1: Amino Acid Parameters ---

    # Find all JSON files for amino acids
    aa_files = [f for f in parameters_dir.glob('*.json') if f.name != 'nco_stat.json' and f.name != 'UNK.json']

    # Load the data from the JSON files
    aa_data = []
    for f in aa_files:
        with open(f, 'r') as fp:
            data = json.load(fp)
            aa_data.append(data)

    # Sort the data according to the canonical order
    aa_data_map = {d['short_name']: d for d in aa_data}
    sorted_aa_data = [aa_data_map[code] for code in canonical_order]

    # Also add the UNK data at the end
    with open(parameters_dir / 'UNK.json', 'r') as fp:
        unk_data = json.load(fp)

    # Generate the Python code for the data lists
    aa_names = [d['name'] for d in sorted_aa_data] + [unk_data['name']]
    short_aa_names = "".join([d['short_name'] for d in sorted_aa_data]) + unk_data['short_name']
    nheavy = [d['num_heavy_atoms'] for d in sorted_aa_data]
    heavy_atom_names = [d['heavy_atom_names'] for d in sorted_aa_data]

    # --- Part 1a: Hydrogen Atom Data ---

    hydrogen_atom_names = []
    hydrogen_atom_coords = []

    for residue_data in sorted_aa_data:
        residue_name_3_letter = residue_data['name']

        # Create non-collinear dummy heavy atom coordinates
        dummy_heavy_atoms = {}
        # Add backbone atoms that are required for amide hydrogen placement
        dummy_heavy_atoms['N'] = np.array([0.0, 0.0, 0.0])
        dummy_heavy_atoms['CA'] = np.array([1.45, 0.0, 0.0])
        dummy_heavy_atoms['C'] = np.array([1.45 + 1.52*np.cos(np.deg2rad(111.0)), 1.52*np.sin(np.deg2rad(111.0)), 0.0])

        for i, atom_name in enumerate(residue_data['heavy_atom_names']):
            if atom_name not in dummy_heavy_atoms:
                dummy_heavy_atoms[atom_name] = np.array([(i+3) * 1.5, (i+3) % 2, 0.0])

        # Get hydrogen positions
        # For amide hydrogen, we need prev_c. Create a dummy one.
        prev_c = np.array([-0.5, 1.0, 0.5])
        hydrogens = get_hydrogen_positions(residue_name_3_letter, dummy_heavy_atoms, prev_c=prev_c)

        hydrogen_atom_names.append(list(hydrogens.keys()))
        hydrogen_atom_coords.append(list(hydrogens.values()))


    # --- Part 2: NCO STAT Data ---

    with open(parameters_dir / 'nco_stat.json', 'r') as fp:
        nco_data = json.load(fp)

    nco_stat = []
    for entry in nco_data["NCO_STAT"]:
        indices = np.array(entry[0], dtype=np.int32)
        vectors = np.array(entry[1], dtype=np.float64)
        nco_stat.append((indices, vectors))

    nco_stat_pro = []
    for entry in nco_data["NCO_STAT_PRO"]:
        indices = np.array(entry[0], dtype=np.int32)
        vectors = np.array(entry[1], dtype=np.float64)
        nco_stat_pro.append((indices, vectors))

    # --- Part 3: Write to data.py ---

    with open(data_file, 'w') as fp:
        fp.write("# pypulchra/data.py\n")
        fp.write("# THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.\n")
        fp.write("from numpy import array, int32\n\n")

        # AA_NAMES
        fp.write("AA_NAMES = [\n")
        for i in range(0, len(aa_names), 10):
            line = ", ".join([f'"{n}"' for n in aa_names[i:i+10]])
            fp.write(f"    {line},\n")
        fp.write("]\n\n")

        # SHORT_AA_NAMES
        fp.write(f'SHORT_AA_NAMES = "{short_aa_names}"\n\n')

        # AA_MAP_3_TO_1
        fp.write("# Create a mapping from 3-letter code to 1-letter code\n")
        fp.write("AA_MAP_3_TO_1 = {name: SHORT_AA_NAMES[i] for i, name in enumerate(AA_NAMES)}\n")
        fp.write("# Add non-canonical mappings from the C code's setseq function\n")
        fp.write("AA_MAP_3_TO_1.update({\n")
        fp.write('    "GLX": "E",\n')
        fp.write('    "ASX": "D",\n')
        fp.write('    "HID": "H",\n')
        fp.write('    "MSE": "M",\n')
        fp.write('    "SEP": "S",\n')
        fp.write('    "TPO": "T",\n')
        fp.write('    "PTR": "Y",\n')
        fp.write("})\n\n")

        # AA_NUMS and AA_MAP_3_TO_NUM
        fp.write("# Mapping from 1-letter code to an integer index\n")
        fp.write("AA_NUMS = {code: i for i, code in enumerate(SHORT_AA_NAMES)}\n")
        fp.write("AA_NUMS['X'] = 20 # UNK\n\n")
        fp.write("# Mapping from 3-letter code to integer index\n")
        fp.write("AA_MAP_3_TO_NUM = {\n")
        fp.write("    three: AA_NUMS[one] for three, one in AA_MAP_3_TO_1.items()\n")
        fp.write("}\n\n")

        # NHEAVY
        fp.write("# Number of heavy atoms in the side chain for each of the 20 standard amino acids.\n")
        fp.write("# Indexed by the residue type number (0=GLY, 1=ALA, etc.)\n")
        fp.write(f"NHEAVY = {nheavy}\n\n")

        # HEAVY_ATOM_NAMES
        fp.write("# Names of heavy atoms for each of the 20 standard amino acids.\n")
        fp.write("# This is a direct port of the `heavy_atoms` array in the C code.\n")
        fp.write("HEAVY_ATOM_NAMES = [\n")
        for i, names in enumerate(heavy_atom_names):
            line = ", ".join([f'"{n}"' for n in names])
            fp.write(f"    # {aa_names[i]}\n")
            fp.write(f"    [{line}],\n")
        fp.write("]\n\n\n")

        # HYDROGEN_ATOM_NAMES
        fp.write("# Names of polar hydrogen atoms for each of the 20 standard amino acids.\n")
        fp.write("HYDROGEN_ATOM_NAMES = [\n")
        for i, names in enumerate(hydrogen_atom_names):
            line = ", ".join([f'"{n}"' for n in names])
            fp.write(f"    # {aa_names[i]}\n")
            fp.write(f"    [{line}],\n")
        fp.write("]\n\n\n")

        # HYDROGEN_ATOM_COORDS
        fp.write("# Ideal coordinates of polar hydrogen atoms for each of the 20 standard amino acids.\n")
        fp.write("HYDROGEN_ATOM_COORDS = [\n")
        for i, coords_list in enumerate(hydrogen_atom_coords):
            fp.write(f"    # {aa_names[i]}\n")
            fp.write("    [\n")
            if coords_list:
                for coords in coords_list:
                    fp.write(f"        {format_array(coords)},\n")
            fp.write("    ],\n")
        fp.write("]\n\n\n")

        # NCO_STAT
        fp.write("NCO_STAT = [\n")
        for i, (indices, vectors) in enumerate(nco_stat):
            indices_str = "array(" + np.array2string(indices, separator=', ') + ", dtype=int32)"
            vectors_str = "array(" + np.array2string(vectors, separator=', ', precision=3, floatmode='fixed') + ")"
            fp.write(f"    ({indices_str}, {vectors_str})")
            if i < len(nco_stat) - 1:
                fp.write(",\n")
        fp.write("\n]\n\n")

        # NCO_STAT_PRO
        fp.write("NCO_STAT_PRO = [\n")
        for i, (indices, vectors) in enumerate(nco_stat_pro):
            indices_str = "array(" + np.array2string(indices, separator=', ') + ", dtype=int32)"
            vectors_str = "array(" + np.array2string(vectors, separator=', ', precision=3, floatmode='fixed') + ")"
            fp.write(f"    ({indices_str}, {vectors_str})")
            if i < len(nco_stat_pro) - 1:
                fp.write(",\n")
        fp.write("\n]\n")


if __name__ == "__main__":
    main()
